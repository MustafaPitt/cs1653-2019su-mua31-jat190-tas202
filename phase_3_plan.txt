-------------------------------client code changes
ClientApplication.java
-create RSA keypair  (1 key pair for all users, this is fine because this private key is only used to sign diffie-hellman.)

Client.java
-gen DH private key a (we want if different every time for different sessions) for gs
-send to gs signed DH public key
-the gs will send back its signed DH public key and from this we will compute a DH shared key
-same 3 above steps for fs


GroupClient.java
->overide client's connect
	-client()
	-send gs {username, password}Kab

FileClient.java
->overide client's connect
	-client()
	-send fs {{timestamp}Kf}Kaf

Token.java 
-add byte signed_hash_token

-------------------------------------------------------group server code changes
GroupServer.java
-add a try / catch for RSA gen. Try to read in rsa pair from bin file and if it doesn't exist make new pair.

GroupThread.java
-gen DH private key
-recieve DH public key from client, compute Kab
-send gs signed DH public key
-recieve client (user, pass), check it with our userlist->hashed password
	-if correct, return {token, {H(token)Kb-1}Kab
	-if incorrect, send denial

--------------------------------------------------- file server code changes
FileServer.java
-add a try / catch for RSA gen. Try to read in rsa pair from bin file and if it doesn't exist make new pair.

FileThread.java 
-gen DH private key from client, compute Kaf
-recieve encrypted timestamp, decipher and send in return {timestamp+1}Kaf

-at each operation in filethread that recieves a token, we want to verify that token with it's sent signed hash